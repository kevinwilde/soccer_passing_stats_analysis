stats = 'book1.txt'
NUM_STATS = 6
NUM_PLAYERS = 0

##class Player(object):
##    def __init__(self, id, name, position, assists, passpercentage, passespg, keypassespg, crossespg, throughballspg):
##        self.name = name
##        self.id = id
##        self.position = position
##        self.assists = assists
##        self.passpercentage = passpercentage
##        self.passespg = passespg
##        self.keypassespg = keypassespg
##        self.crossespg = crossespg
##        self.throughballspg = throughballspg
##        self.z_assists = 0
##        self.z_passpercentage = 0
##        self.z_passespg = 0
##        self.z_keypassespg = 0
##        self.z_crossespg = 0
##        self.z_throughballspg = 0
##
##def loadStats2(filename):
##    inputFile = open(filename)
##    lst = []
##    i = 0
##    for line in inputfile:
##        arr = line.split()
##        lst.append(Player(i, ' '.join(arr[7:]), arr[0], int(arr[1]), float(arr[2]), float(arr[3]), float(arr[4]), float(arr[5]), float(arr[6])))
##        i += 1
##    return lst
##
##def calcAveAndStDev(lstOfPlayers):
##    import numpy
##    numplayers = len(lstOfPlayers)
##    lst_assists = []
##    lst_passpercentage = []
##    lst_passespg = []
##    lst_keypassespg = []
##    lst_crossespg = []
##    lst_throughballspg = []
##    for player in lstOfPlayers:
##        lst_assists.append(player.assists)
##        lst_passpercentage.append(player.passpercentage)
##        lst_passespg.append(player.passespg)
##        lst_keypassespg.append(player.keypassespg)
##        lst_crossespg.append(player.crossespg)
##        lst_throughballspg.append(player.throughballspg)
##    avesAndStDevs = {'assists': [float(sum(lst_assists))/numplayers, numpy.std(lst_assists)],
##                     'passpercentage': [sum(lst_passpercentage)/numplayers, numpy.std(lst_passpercentage)],
##                     'passespg': [sum(lst_passespg)/numplayers, numpy.std(lst_passespg)],
##                     'keypassespg': [sum(lst_keypassespg)/numplayers, numpy.std(lst_keypassespg)],
##                     'crossespg': [sum(lst_crossespg)/numplayers, numpy.std(lst_crossespg)],
##                     'throughballspg': [sum(lst_throughballspg)/numplayers, numpy.std(lst_throughballspg)]}
##    return avesAndStDevs

def loadStats(filename):
    inputFile = open(filename)
    playerstats = {}
    count = 1
    for line in inputFile:
        arr = line.split()
        playerstats[arr[0] + str(count)] = (arr[1:])
        count += 1
    for item in playerstats:
        for i in range(7):
            playerstats[item][i] = float(playerstats[item][i])
    return playerstats

def loadStats(filename):
    inputFile = open(filename)
    playerstats = []
    count = 0
    for line in inputFile:
        arr = line.split()
        playerstats[count] = arr[0:NUM_STATS + 1]
        playerstats[count].append(' '.join(arr[NUM_STATS + 1:]))
        count += 1
    NUM_PLAYERS = count
    for i in range(NUM_PLAYERS):
        for j in range(NUM_STATS):
            playerstats[i][j] = float(playerstats[i][j])
    return playerstats

##def convertToZ2(lstOfPlayers):
##    avesAndStDevs = calcAveAndStDev(lstOfPlayers)
##    for player in lstOfPlayers:
##        player.z_assists = (player.assists - avesAndStDevs['assists'][0]) / avesAndStDevs['assists'][1]
##        player.z_passpercentage = (player.passpercentage - dictAvesAndStDevs['passpercentage'][0]) / dictAvesAndStDevs['passpercentage'][1]
##        player.z_passespg = (player.passespg - dictAvesAndStDevs['passespg'][0]) / dictAvesAndStDevs['passespg'][1]
##        player.z_keypassespg = (player.keypassespg - dictAvesAndStDevs['keypassespg'][0]) / dictAvesAndStDevs['keypassespg'][1]
##        player.z_crossespg = (player.crossespg - dictAvesAndStDevs['crossespg'][0]) / dictAvesAndStDevs['crossespg'][1]
##        player.z_throughballspg = (player.throughballspg - dictAvesAndStDevs['throughballspg'][0]) / dictAvesAndStDevs['throughballspg'][1]        
##    return lstOfPlayers

def calcAveAndStDev(playerstats):
##    import numpy
##    numplayers = len(playerstats)
##    lst_assists = []
##    lst_passpercentage = []
##    lst_passespg = []
##    lst_keypassespg = []
##    lst_crossespg = []
##    lst_throughballspg = []
##    for i in range(numplayers):
##            lst_assists.append(playerstats[i][j])
##            lst_passpercentage.append(player.passpercentage)
##            lst_passespg.append(player.passespg)
##            lst_keypassespg.append(player.keypassespg)
##            lst_crossespg.append(player.crossespg)
##            lst_throughballspg.append(player.throughballspg)           
##    avesAndStDevs = {'assists': [float(sum(lst_assists))/numplayers, numpy.std(lst_assists)],
##                     'passpercentage': [sum(lst_passpercentage)/numplayers, numpy.std(lst_passpercentage)],
##                     'passespg': [sum(lst_passespg)/numplayers, numpy.std(lst_passespg)],
##                     'keypassespg': [sum(lst_keypassespg)/numplayers, numpy.std(lst_keypassespg)],
##                     'crossespg': [sum(lst_crossespg)/numplayers, numpy.std(lst_crossespg)],
##                     'throughballspg': [sum(lst_throughballspg)/numplayers, numpy.std(lst_throughballspg)]}
    import numpy
    avesAndStDevs = []
    for i in range(NUM_STATS):
        lst = []
        lst.append(playerstats[j for j in range(NUM_PLAYERS)][i])
        ave = sum(lst)/NUM_PLAYERS
        stdev = numpy.std(lst)
        avesAndStDevs.append([ave, stdev])
    return avesAndStDevs

def convertToZ(playerstats):
    zscores = {}
    avesAndStDevs = calcAveAndStDev(playerstats)
    for i in range(NUM_PLAYERS):
        for j in range(NUM_STATS):
        zscores[item] = [0, 0, 0, 0, 0, 0, 0]
        #Assists
        zscores[item][0] = (playerstats[i][0] - 0.23)/0.58206
##        zscores[item][0] = (statdict[item][0] - 0.23)/100000.0

        #Key Passes per Game
        zscores[item][1] = (statdict[item][1] - 0.821)/0.848859
##        zscores[item][1] = (statdict[item][1] - 0.821)/100000.0

        #Avg number of passes per game
        zscores[item][2] = (statdict[item][2] - 39.9785)/17.75915
##        zscores[item][2] = (statdict[item][2] - 39.9785)/100000.0

        #Pass percentage
        zscores[item][3] = (statdict[item][3] - 80.7045)/10.41959
##        zscores[item][3] = (statdict[item][3] - 39.9785)/100000.0
        
        #accurate crosses per game
        zscores[item][4] = (statdict[item][4] - 0.3495)/0.566927
##        zscores[item][4] = (statdict[item][4] - 0.3495)/100000.0

        #accurate long balls per game
        zscores[item][5] = (statdict[item][5] - 2.4635)/2.347225
##        zscores[item][5] = (statdict[item][5] - 2.4635)/100000.0

        #accurate through balls per game
        zscores[item][6] = (statdict[item][6] - 0.058)/0.196287
##        zscores[item][6] = (statdict[item][6] - 0.058)/100000.0
    return zscores


def diffBetweenPlayers(player1, player2):
    diff = 0
    for i in range(7):
        diff += (player1[i]-player2[i])
    return diff

##def diffBetweenPlayers2(player1, player2):
##    diff = 0
##    diff += player1.z_assists - player2.z_assists
##    diff += player1.z_passpercentage - player2.z_passpercentage
##    diff += player1.z_passespg - player2.z_passespg
##    diff += player1.z_keypassespg - player2.z_keypassespg
##    diff += player1.z_crossespg - player2.z_crossespg
##    diff += player1.z_throughballspg - player2.z_throughballspg
##    return diff

def clusterAve(cluster, playerdict):
    #cluster is a list
    ave = [0, 0, 0, 0, 0, 0, 0]
    for i in range(7):
        total = 0
        for player in cluster:
            total += playerdict[player][i]
        ave[i] = total/len(cluster)
    best = 999
    for player in cluster:
        playerdiff = diffBetweenPlayers(playerdict[player], ave)
        if playerdiff < best:
            best = playerdiff
            aveplayer = player
    return aveplayer

def clusterAve2(cluster, lstOfPlayers):
    #cluster is a list
    ave = [0, 0, 0, 0, 0, 0, 0]
    for i in range(7):
        total = 0
        for player in cluster:
            total += lstOfPlayers[player]
        ave[i] = total/len(cluster)
    best = float('inf')
    for playerID in cluster:
        playerdiff = (lstOfPlayers[playerID].z_assists - ave[0])
        if playerdiff < best:
            best = playerdiff
            aveplayer = player
    return aveplayer
    
def makeClusters(k, maxMovers, statdict):
    import random
    centroids = []
    clusters = []
    for i in range(k):
        centroidChoice = random.choice(statdict.keys())
        centroids.append(centroidChoice)
        clusters.append([centroidChoice])
##    print centroids
##    print clusters
##    temp = raw_input()
    movers = 200
    while movers >= maxMovers:
        movers = 0
        for player in statdict:
            diffs = []
            for centroid in centroids:
                diffs.append(abs(diffBetweenPlayers(statdict[player], statdict[centroid])))
####                print diffs
            minDiffIndex = diffs.index(min(diffs))
####            print minDiffIndex
            if player not in clusters[minDiffIndex]:
                movers += 1
                for i in range(k):
                    if i != minDiffIndex:
                        if player in clusters[i]:
                            clusters[i].remove(player)
                            break
####                print minDiffIndex
                clusters[minDiffIndex].append(player)
##        print clusters
##        temp = raw_input()
        for x in range(k):
            centroids[x] = clusterAve(clusters[x], statdict)
##        print centroids
##    print '============================================================'
    return clusters

def makeClusters2(k, maxMovers, lstOfPlayers):
    import random
    centroids = []
    clusters = []
    for i in range(k):
        centroidChoice = random.choice(range(0, len(lstOfPlayers)))
        centroids.append(centroidChoice)
        clusters.append([centroidChoice])
##    print centroids
##    print clusters
##    temp = raw_input()
    movers = 200
    while movers >= maxMovers:
        movers = 0
        for player in lstOfPlayers:
            diffs = []
            for centroid in centroids:
                diffs.append(abs(diffBetweenPlayers(lstOfPlayers[player.id], lstOfPlayers[centroid])))
####                print diffs
            minDiffIndex = diffs.index(min(diffs))
####            print minDiffIndex
            if player not in clusters[minDiffIndex]:
                movers += 1
                for i in range(k):
                    if i != minDiffIndex:
                        if player in clusters[i]:
                            clusters[i].remove(player)
                            break
####                print minDiffIndex
                clusters[minDiffIndex].append(player)
##        print clusters
##        temp = raw_input()
        for x in range(k):
            centroids[x] = clusterAve(clusters[x], lstOfPlayers)
##        print centroids
##    print '============================================================'
    return clusters

def loadPlayerDisplay(fileName):
    inputfile = open(fileName)
    d = {}
    count = 0
    for line in inputfile:
        count += 1
        newline = line.split()
        d[newline[0] + str(count)] = ' '.join(newline[1:])
    return d
        
    
def displayClusters(clusters, playerdict):
    for i in range(len(clusters)):
        print 'Cluster #' + str(i+1) + ':'
        for item in clusters[i]:
            print playerdict[item] + ',',
        print
        print
    
zdict = convertToZ(loadStats(stats))
##print zdict
displayClusters(makeClusters(5, 1, zdict), loadPlayerDisplay('playerdisplay.txt'))
